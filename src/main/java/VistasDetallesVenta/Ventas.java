/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package VistasDetallesVenta;

import Entidades.*;
import Conexion.*;
import Vistas.Principal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author cisco
 */
public class Ventas extends javax.swing.JPanel {

    private DefaultTableModel model = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };
    /**
     * Creates new form Ventas
     */
    List<Venta> ventasCliente = VentaData.listarVentas();
    List<Cliente> clientes = new ArrayList<>();
    Cliente clienteSeleccionado = null;

    public Ventas() {
        initComponents();
        agregarCabeceras();
        cargarGeneral();
        jrDni.setSelected(true);
    }

    private void agregarCabeceras() {
        model.addColumn("ID");
        model.addColumn("Nombre y Apellido");
        model.addColumn("DNI");
        model.addColumn("Fecha de Venta");
        tablaVentas.setModel(model);
        ajustarCabeceras();
        centrarTabla(tablaVentas);
    }

    private void ajustarCabeceras() {
        TableColumnModel columnModel = tablaVentas.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(25);
        columnModel.getColumn(1).setPreferredWidth(120);
        columnModel.getColumn(2).setPreferredWidth(80);
        columnModel.getColumn(3).setPreferredWidth(80);
    }

    public static void centrarTabla(JTable tabla) {
        DefaultTableCellRenderer centrar = new DefaultTableCellRenderer();
        centrar.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);

        for (int i = 0; i < tabla.getColumnCount(); i++) {
            tabla.getColumnModel().getColumn(i).setCellRenderer(centrar);
        }
    }

    private void cargarLista() {
        ventasCliente = VentaData.listarVentas();
        clientes = ClienteData.listaCliente();
        ventasCliente = VentaData.buscarVentas(clienteSeleccionado);
        if (ventasCliente.isEmpty()) {
            model.addRow(new Object[]{
                "Sin id",
                clienteSeleccionado.getNombre() + " " + clienteSeleccionado.getApellido(),
                clienteSeleccionado.getDni(),
                "Sin venta",});
        } else {
            for (Venta venta : ventasCliente) {
                model.addRow(new Object[]{
                    venta.getIdVenta(),
                    venta.getCliente().getNombre() + " " + venta.getCliente().getApellido(),
                    venta.getCliente().getDni(),
                    venta.getFechaVenta(),});
            }
        }
    }

    private void cargarGeneral() {
        borrarfilas();
        List<Integer> clientesSinVentas = listaClientesSinVenta();
        for (Venta venta : ventasCliente) {
            model.addRow(new Object[]{
                venta.getIdVenta(),
                venta.getCliente().getNombre() + " " + venta.getCliente().getApellido(),
                venta.getCliente().getDni(),
                venta.getFechaVenta(),});
        }
        for (Integer idCliente : clientesSinVentas) {
            for (Cliente cliente : clientes) {
                if (cliente.getIdCliente() == idCliente) {
                    model.addRow(new Object[]{
                        "Sin id",
                        cliente.getNombre() + " " + cliente.getApellido(),
                        cliente.getDni(),
                        "Sin venta"
                    });
                }
            }
        }
    }

    private List<Integer> listaClientesSinVenta() {
        ventasCliente = VentaData.listarVentas();
        clientes = ClienteData.listaCliente();
        List<Integer> clientesSinVenta = new ArrayList<>();

        for (Cliente cliente : clientes) {
            boolean tieneVenta = false;
            int idCliente = cliente.getIdCliente();

            for (Venta venta : ventasCliente) {
                if (venta.getCliente().getIdCliente() == idCliente) {
                    tieneVenta = true;
                    break;
                }
            }

            if (!tieneVenta) {
                clientesSinVenta.add(idCliente);
            }
        }
        return clientesSinVenta;
    }

    private void borrarfilas() {
        int f = tablaVentas.getRowCount() - 1;

        for (int i = f; i >= 0; i--) {
            model.removeRow(i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Filtro = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaVentas = new javax.swing.JTable();
        jtBuscado = new javax.swing.JTextField();
        jbDetalles = new javax.swing.JButton();
        jbRealizarCompra = new javax.swing.JButton();
        jrDni = new javax.swing.JRadioButton();
        jrApellido = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();

        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                formAncestorResized(evt);
            }
        });

        jLabel1.setText("Buscar");

        tablaVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "idCliente", "idVenta", "Fecha"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaVentas.setFillsViewportHeight(true);
        jScrollPane1.setViewportView(tablaVentas);

        jtBuscado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtBuscadoActionPerformed(evt);
            }
        });
        jtBuscado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtBuscadoKeyReleased(evt);
            }
        });

        jbDetalles.setText("Ver detalles");
        jbDetalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDetallesActionPerformed(evt);
            }
        });

        jbRealizarCompra.setText("Realizar nueva venta");
        jbRealizarCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRealizarCompraActionPerformed(evt);
            }
        });

        Filtro.add(jrDni);
        jrDni.setText("Por DNI");

        Filtro.add(jrApellido);
        jrApellido.setText("Por Apellido");

        jLabel4.setText("Filtrar por: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(8, 8, 8)
                        .addComponent(jtBuscado, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 233, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jrDni)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jrApellido)
                        .addGap(29, 29, 29))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbRealizarCompra)
                        .addGap(52, 52, 52)
                        .addComponent(jbDetalles)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrDni)
                    .addComponent(jtBuscado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jrApellido))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbDetalles)
                    .addComponent(jbRealizarCompra))
                .addGap(14, 14, 14))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jtBuscadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtBuscadoActionPerformed
    }//GEN-LAST:event_jtBuscadoActionPerformed

    private void formAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorResized
        // TODO add your handling code here:
    }//GEN-LAST:event_formAncestorResized

    private void jbDetallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDetallesActionPerformed
        int fila = tablaVentas.getSelectedRow();
        int idVenta = (int) tablaVentas.getValueAt(fila, 0);
        Venta venta = VentaData.buscarVenta(idVenta);
        Principal.mostrarDetalle(venta, fila);
    }//GEN-LAST:event_jbDetallesActionPerformed

    private void jbRealizarCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRealizarCompraActionPerformed
        LocalDate fecha;
        fecha = LocalDate.now();
        int fila=tablaVentas.getSelectedRow();
        Cliente cl=ClienteData.BuscarClienteDNI((int) tablaVentas.getValueAt(fila, 2));
        clienteSeleccionado=cl;
        if (clienteSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un cliente",
                    "Error Cliente nulo!", JOptionPane.ERROR_MESSAGE);
        } else {
            var nueva = new Venta(clienteSeleccionado, fecha);
            VentaData.guardarVenta(nueva);
            Principal.mostrarRealizarVenta(nueva);
        }


    }//GEN-LAST:event_jbRealizarCompraActionPerformed

    private void jtBuscadoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtBuscadoKeyReleased
        borrarfilas();
        String buscado = jtBuscado.getText();
        if (!buscado.isEmpty()) {
            if (jrDni.isSelected() && esNumero()) {
                String dni;
                 for (Cliente cliente : clientes) {
                    dni = String.valueOf(cliente.getDni());
                    if (dni.startsWith(buscado)) {
                        clienteSeleccionado = cliente;
                        cargarLista();
                    }
                }
            } else {
                for (Cliente cliente : clientes) {
                    if (cliente.getApellido().startsWith(buscado)) {
                        clienteSeleccionado = cliente;
                        cargarLista();
                    }
                }
            }
        } else {
            cargarGeneral();
        }
    }//GEN-LAST:event_jtBuscadoKeyReleased

    private boolean esNumero() {
        try {
            Integer.parseInt(jtBuscado.getText());
            return true;
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error debe ingresar un numero");
        }
        jtBuscado.setText("");
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup Filtro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbDetalles;
    private javax.swing.JButton jbRealizarCompra;
    private javax.swing.JRadioButton jrApellido;
    private javax.swing.JRadioButton jrDni;
    private javax.swing.JTextField jtBuscado;
    private javax.swing.JTable tablaVentas;
    // End of variables declaration//GEN-END:variables
}
